
<html>
 <head>
     <link rel="stylesheet" href="C:\Users\cgarr\OneDrive\Documents\OOD\RemoteCodeRepository\PublishedFiles\style.css">
     <script src="C:\Users\cgarr\OneDrive\Documents\OOD\RemoteCodeRepository\PublishedFiles\collapse.js"></script>
 </head>
 <body>
    <h3>HTMLparts.h</h3>
    <hr />
    <div class="indent">
        <h4>Dependencies:</h4>
         <p><a href="C:\Users\cgarr\OneDrive\Documents\OOD\RemoteCodeRepository\RepoStorage\Category1\HTMLparts.cpp.htm">HTMLparts.cpp</a></p>
    </div>
    <hr />
  <pre>
#pragma once


/////////////////////////////////////////////////////////////////////////////
//  HTMLparts.h - HTML genetator parts                                     //
//  Language:     C++, VS 2015                                             //
//  Platform:     SurfaceBook, Windows 10 Pro                              //
//  Application:  Project1 for CSE687 - Object Oriented Design             //
//  Author:       Weijun Cai                                               //
/////////////////////////////////////////////////////////////////////////////
/*
*   Module Operations
*   -----------------
*   This module contains the delaration of the implementors of
*   multiple IHTML part interfaces, which can be attached to HTMLgenerator
*/
/*
*   Build Process
*   -------------
*   - Required files: IHTML.h
*                     HTMLparts.h, HTMLparts.cpp
*                     FileSystem.h, FileSystem.cpp
*
*   Maintenance History
*   -------------------
*   ver 1.0 : 28 Mar 2017
*/

#include &lt;unordered_map&gt;
#include &lt;stack&gt;
#include IHTML.h
#include ../FileSystem/FileSystem.h
#include ../Parser/Parser.h


class HTMLhead : public IHTMLhead
<button id="btn37" onclick="collapse('body37', 'btn37')">-</button><span id="body37">{
public:
	// application specific, generate html header
	void generateHead(std::istream& input, std::ostream& output, const std::string& style, const std::string& js) override;
};</span>


class DependencyPart : public IHTMLbodypart
<button id="btn45" onclick="collapse('body45', 'btn45')">-</button><span id="body45">{
public:
	// application specific, generate dependency part
	void generateBodyPart(std::istream& input, std::ostream& output, Element&lt;std::string&gt;* info) override;
};</span>


// no scope collapse function
class CodePart : public IHTMLbodypart
<button id="btn54" onclick="collapse('body54', 'btn54')">-</button><span id="body54">{
public:
	// application specific, generate source code part
	void generateBodyPart(std::istream& input, std::ostream& output, Element&lt;std::string&gt;* info) override;

private:
	// replace all markups with the escaped form
	void processMarkupChars(std::string& line);

};</span>


// scope collapse functionality supported
class CodePartCollapse : public IHTMLbodypart
<button id="btn68" onclick="collapse('body68', 'btn68')">-</button><span id="body68">{
public:
	// application specific, generate source code part
	void generateBodyPart(std::istream& input, std::ostream& output, Element&lt;std::string&gt;* info) override;

private:
	void GenerateCollapse(std::istream & input, std::ostream & output);
	bool processNormalChar(char c, std::ostream & output, size_t& lineCount);
	bool processQuoteChar(char c, std::ostream & output, std::stack&lt;char&gt;& quoteStack);
	bool processScopeChar(char c, std::istream & input, std::ostream & output, std::stack&lt;char&gt;& quoteStack, size_t & lineCount);
};</span>

class HTMLbody : public IHTMLbody
<button id="btn81" onclick="collapse('body81', 'btn81')">-</button><span id="body81">{
public:
	// generate the html body using its body generator parts
	void generateBody(std::istream& input, std::ostream& output, Element&lt;std::string&gt;* info) override;

	// add/remove body generator parts 
	void addBodyPart(IHTMLbodypart* body) override;
	void delBodyPart(IHTMLbodypart* body) override;
	void clearBodyparts();
	~HTMLbody();
private:
	std::vector&lt;IHTMLbodypart*&gt; bodyParts;
};</span>
  </pre>

 </body>
</html>